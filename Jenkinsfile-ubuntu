pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'grvsoni/hello-go'
        GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        GO_INSTALL_DIR = '${HOME}/go-install'
    }
    
    stages {
        stage('Setup Environment') {
            steps {
                script {
                    // Install Go without sudo
                    sh '''
                        if ! command -v go &> /dev/null; then
                            echo "Installing Go..."
                            mkdir -p ${GO_INSTALL_DIR}
                            wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
                            tar -C ${GO_INSTALL_DIR} -xzf go1.21.6.linux-amd64.tar.gz
                            rm go1.21.6.linux-amd64.tar.gz
                            export PATH=${GO_INSTALL_DIR}/go/bin:$PATH
                            echo "Go installation completed. Version: $(go version)"
                        fi
                    '''
                    
                    // Install TruffleHog without sudo
                    sh '''
                        if ! command -v trufflehog &> /dev/null; then
                            echo "Installing TruffleHog..."
                            pip3 install --user trufflehog
                            echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
                            source ~/.bashrc
                        fi
                    '''
                    
                    // Install Trivy without sudo
                    sh '''
                        if ! command -v trivy &> /dev/null; then
                            echo "Installing Trivy..."
                            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | tee /tmp/trivy.gpg > /dev/null
                            echo "deb [signed-by=/tmp/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list
                            apt-get update
                            apt-get install -y trivy
                        fi
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    try {
                        // Run TruffleHog scan
                        sh '''
                            echo "Starting security scan..."
                            trufflehog --only-verified . > trufflehog-results.txt || true
                            
                            # Check if any secrets were found
                            if [ -s trufflehog-results.txt ]; then
                                echo "WARNING: Potential secrets found in the codebase!"
                                cat trufflehog-results.txt
                                currentBuild.result = 'UNSTABLE'
                            else
                                echo "No secrets found in the codebase."
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Security scan failed: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                sh '''
                    # Setup Go environment
                    export PATH=${GO_INSTALL_DIR}/go/bin:$PATH
                    echo "Using Go version: $(go version)"
                    
                    # Build the application
                    go build -o main
                '''
            }
        }
        
        stage('Test') {
            steps {
                sh '''
                    # Setup Go environment
                    export PATH=${GO_INSTALL_DIR}/go/bin:$PATH
                    echo "Using Go version: $(go version)"
                    
                    # Run tests
                    go test ./...
                '''
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    try {
                        // Build the image with meaningful tags
                        sh "docker build -t ${DOCKER_IMAGE}:${GIT_COMMIT_SHORT} -t ${DOCKER_IMAGE}:latest ."
                        
                        // Login to DockerHub
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                       usernameVariable: 'DOCKER_USER', 
                                                       passwordVariable: 'DOCKER_PASS')]) {
                            sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        }
                        
                        // Push all tags
                        sh "docker push ${DOCKER_IMAGE}:${GIT_COMMIT_SHORT}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                        
                        // Logout from DockerHub
                        sh "docker logout"
                        
                        // Print version information
                        echo """
                        Image versions pushed to DockerHub:
                        - ${DOCKER_IMAGE}:${GIT_COMMIT_SHORT} (Git commit)
                        - ${DOCKER_IMAGE}:latest (Latest version)
                        """
                    } catch (Exception e) {
                        echo "Failed to build or push Docker image: ${e.message}"
                        throw e
                    }
                }
            }
        }
        
        stage('Container Security Scan') {
            steps {
                script {
                    try {
                        // Run Trivy scan on the image
                        sh '''
                            echo "Starting container security scan..."
                            
                            # Scan for vulnerabilities
                            trivy image --format json --output trivy-vuln.json ''' + "${DOCKER_IMAGE}:${GIT_COMMIT_SHORT}" + '''
                            
                            # Scan for misconfigurations
                            trivy config --format json --output trivy-config.json .
                            
                            # Check if any critical or high vulnerabilities were found
                            if grep -q '"Severity":"CRITICAL"\\|"Severity":"HIGH"' trivy-vuln.json; then
                                echo "WARNING: Critical or High vulnerabilities found in the container image!"
                                cat trivy-vuln.json
                                currentBuild.result = 'UNSTABLE'
                            else
                                echo "No critical or high vulnerabilities found in the container image."
                            fi
                            
                            # Check for misconfigurations with failures
                            if grep -q '"Status":"FAIL"' trivy-config.json; then
                                echo "WARNING: Misconfigurations found in the container!"
                                cat trivy-config.json
                                currentBuild.result = 'UNSTABLE'
                            else
                                echo "No misconfigurations found in the container."
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Container security scan failed: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        // Verify kubectl is available
                        sh '''
                            if ! command -v kubectl &> /dev/null; then
                                echo "kubectl not found. Please ensure it is installed and configured."
                                exit 1
                            fi
                        '''

                        // Create namespace if it doesn't exist
                        sh 'kubectl apply -f k8s/namespace.yaml'

                        // Deploy the application
                        sh '''
                            echo "Deploying to Kubernetes..."
                            kubectl apply -f k8s/deployment.yaml
                            kubectl apply -f k8s/service.yaml
                            
                            # Wait for deployment to be ready
                            kubectl -n hello-go-pre rollout status deployment/hello-go --timeout=300s
                            
                            echo "Deployment completed successfully!"
                            
                            # Display service information
                            echo "Service details:"
                            kubectl -n hello-go-pre get service hello-go
                        '''
                    } catch (Exception e) {
                        echo "Kubernetes deployment failed: ${e.message}"
                        throw e
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Archive the security scan results
            archiveArtifacts artifacts: 'trufflehog-results.txt,trivy-vuln.json,trivy-config.json', allowEmptyArchive: true
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        unstable {
            echo 'Pipeline completed with warnings (security issues found)!'
        }
    }
} 